using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace TabModellerMVC
{
    public partial class GraphicalBarsForm: Form, ITabModellerView
    {


        //Filename to load bars from.
        private String loadBarsFileName;

        //Int used to position BarTextBoxes generated by to show tab.
        private static int BAR_TEXT_VIEW_X_COORD = 40;
        private static int BAR_TEXT_BOX_Y_COORD_INCREMENT = 80;

        //The selectedBarTextBox that modify and delete operations are performed on.
        private BarTextBox selectedBarTextBox;

        //These are the lines of tab from the selected bar text box before it has been modified.
        private String[] selectedBarTextBoxOriginalLines;

        //The tabModellerModel for this class.
        TabModellerModel tabModellerModel;

        /// <summary>
        /// The constructor for the graphical bar view. Calls the TabModellerView super class constructor.
        /// </summary>
        /// <param name="tabModellerModel">The model for this view.</param>
        public GraphicalBarsForm(TabModellerModel tabModellerModel)
        {
            this.tabModellerModel = tabModellerModel;
            InitializeComponent();
        }

        /// <summary>
        /// This function updates the GraphicalBarView with new data from the model.
        /// </summary>
        /// <param name="bars">An array of Bar objects to update the view with.</param>
        public void update(List<Bar> bars)
        {
            //Clearing tab panel so new views can be drawn.
            this.clearTabPanel();
            int yPosition = 0;
            for (int i = 0; i < bars.Count; i++)
            {
                BarTextBox currentBarTextBox = new BarTextBox(i);
                currentBarTextBox.id = i;
                for (int x = 0; x < 4; x++)
                {
                    //Do not add new line to last line as it is unnessecary.
                    if (x != 3)
                    {
                        currentBarTextBox.Text += bars[i].lines[x] + Environment.NewLine;
                    }
                    else
                    {
                        currentBarTextBox.Text += bars[i].lines[x];
                    }
                }
                //Positioning and sizing the new barTextBox.
                currentBarTextBox.Size = new Size(500, 70);
                currentBarTextBox.Location = new Point(BAR_TEXT_VIEW_X_COORD, yPosition);
                //Adding the bar text boxes event handler.
                currentBarTextBox.Click += this.barTextBox_Click;
                //Adding the barTextBox to the panel on the form so that it actually appears.
                this.tabPanel.Controls.Add(currentBarTextBox);
                yPosition += BAR_TEXT_BOX_Y_COORD_INCREMENT;
            }
        }

        //HELPER METHODS
        /// <summary>
        /// This function disposes all the controls on the tab panel so they can be redrawn with new data.
        /// </summary>
        public void clearTabPanel()
        {
            while (this.tabPanel.Controls.Count > 0)
            {
                tabPanel.Controls[0].Dispose();
            }
        }


        //EVENT HANDLERS

        /// <summary>
        /// This is the event handler for the add bar button click event. It allows the user to add a bar to the form.
        /// </summary>
        /// <param name="sender">The button that was clicked to fire this event.</param>
        /// <param name="e">The event args for the event.</param>
        protected void addBarButton_Click(object sender, EventArgs e)
        {
            int lineCount = 0;
            List<string[]> barsToAdd = new List<string[]>();
            String[] lines = new String[4];
            Bar currentBar;
            for (int i = 0; i < addBarTextBox.Lines.Length; i++)
            {
                //Checking that line is some sort of tab.
                if (TabModellerModel.validateLine(addBarTextBox.Lines[i]))
                {
                    lines[lineCount] = addBarTextBox.Lines[i];
                    lineCount++;
                    //Once the lines object is full of lines add it to barsToAdd array and reset lineCount.
                    if (lineCount == 4)
                    {
                        barsToAdd.Add(lines);
                        lines = new string[4];
                        lineCount = 0;
                    }
                }                
            }
            tabModellerModel.addBars(barsToAdd);
        }

        /// <summary>
        /// This is the event handler for the delete bar button click event. It allows the user to delete a bar on the form.
        /// </summary>
        /// <param name="sender">The button that was clicked to fire this event.</param>
        /// <param name="e">The event args for the event.</param>
        protected void deleteBarButton_Click(object sender, EventArgs e)
        {
            tabModellerModel.deleteBar(selectedBarTextBox.id);
        }

        /// <summary>
        /// This is the event handler for the modify bar button click event. It allows the user to modify a bar on the form.
        /// </summary>
        /// <param name="sender">The button that was clicked to fire this event.</param>
        /// <param name="e">The event args for the event.</param>
        protected void modifyBarButton_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < selectedBarTextBox.Lines.Length; i++)
            {
                //If lines are not tab prompt the user.
                if (!TabModellerModel.validateLine((selectedBarTextBox.Lines[i])))
                {
                    this.modifyBarValidationLabel.Text = "That is not valid tablature. Please enter valid tablature.";
                    this.selectedBarTextBox.Lines = selectedBarTextBoxOriginalLines;
                    return;
                }
            }
            //If lines are tab update the model.
            this.tabModellerModel.modifyBar(this.selectedBarTextBox.Lines, this.selectedBarTextBox.id);
        }

        /// <summary>
        /// This is the event handler for the barTextBoxes it sets the selected barTextBox so that other operations can be performed on it.
        /// </summary>
        /// <param name="sender">The barTextBox that was clicked.</param>
        /// <param name="e">The event args for the event.</param>
        private void barTextBox_Click(object sender, EventArgs e)
        {
            //Making old selectedBarTextBox read only again.
            try
            {
                this.selectedBarTextBox.ReadOnly = true;
                this.selectedBarTextBox.BackColor = SystemColors.Control;
            }
            catch (NullReferenceException ex)
            {
                //If there is no previous selectedBarTextBox do not crash.
            }
            //Setting the selected barTextBox.
            this.selectedBarTextBox = (BarTextBox)sender;
            //Enabling editing on the selectedBarTextBox.
            this.selectedBarTextBox.ReadOnly = false;
            this.selectedBarTextBox.BackColor = Color.White;
            this.selectedBarTextBoxOriginalLines = selectedBarTextBox.Lines;
        }

        /// <summary>
        /// This function runs when this form is closed. It exits the application.
        /// </summary>
        /// <param name="sender">The sender of this event. In this case the form.</param>
        /// <param name="e">The event args for the event.</param>
        private void GraphicalBarsForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            Application.Exit();
        }

        /// <summary>
        /// This function runs when the save bars button is clicked. It shows the save bars dialog.
        /// </summary>
        /// <param name="sender">The sender of this event. In this case the save bars button.</param>
        /// <param name="e">The event args for the event.</param>
        private void saveBarsButton_Click(object sender, EventArgs e)
        {
            saveBarsDialog.ShowDialog();
        }

        /// <summary>
        /// This function runs when the load bars button is clicked. It shows the load bars dialog.
        /// </summary>
        /// <param name="sender">The sender of this event. In this case the load bars button.</param>
        /// <param name="e">The event args for the event.</param>
        private void loadBarsButton_Click(object sender, EventArgs e)
        {
            loadBarsDialog.ShowDialog();
        }

        /// <summary>
        /// This function runs when the user selects a file in the loadBarsDialog. It starts a new thread and deserializes all the bars from a .dat that the user selected in the dialog.
        /// </summary>
        /// <param name="sender">The loadBarsDialog.</param>
        /// <param name="e">The event args for the event.</param>
        private void loadBarsDialog_FileOk(object sender, CancelEventArgs e)
        {
            this.loadBarsFileName = this.loadBarsDialog.FileName;
            this.loadBarsBackgroundWorker.RunWorkerAsync();
        }

        /// <summary>
        /// This function runs when the user selects a file in the saveBarsDialog. It starts a new thread and serializes all the bars to a .dat that the user selected in the dialog.
        /// </summary>
        /// <param name="sender">The saveBarsDialog.</param>
        /// <param name="e">The event args for the event.</param>
        private void saveBarsDialog_FileOk(object sender, CancelEventArgs e)
        {
            String fileName = this.saveBarsDialog.FileName;
            //Using lambda expression to create the ThreadStart object for the thread. Using lambda instead of ParameterzedThreadStart as I wanted to learn about lambda expressions.
            Thread serializeAllBarsThread = new Thread(() => this.tabModellerModel.serializeAllBars(fileName));
            serializeAllBarsThread.Start();
        }

        /// <summary>
        /// This function asnynchrnously deserliazes the bars from a file on the file system using a new thread.
        /// </summary>
        /// <param name="sender">The loadBarsBackgroundWorker.</param>
        /// <param name="e">The event args for the event.</param>
        private void loadBarsBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            //Using lambda expression to create the ThreadStart object for the thread. Using lambda instead of ParameterzedThreadStart as I wanted to learn about lambda expressions.
            this.tabModellerModel.deserializeAllBars(this.loadBarsFileName);
        }

        /// <summary>
        /// This function runs when the background worker finishes - it updates the view in the application.
        /// </summary>
        /// <param name="sender">The loadBarsBackgroundWorker.</param>
        /// <param name="e">The event args for the event.</param>
        private void loadBarsBackgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            this.tabModellerModel.updateViews();
        }

        /// <summary>
        /// This function runs when the delete all bars button is pressed. It deletes all the bars in the model.
        /// </summary>
        /// <param name="sender">The sender of this event. In this case the delete all bars button.</param>
        /// <param name="e">The event args for the event.</param>
        private void deleteAllBarsButton_Click(object sender, EventArgs e)
        {
            tabModellerModel.deleteAllBars();
        }
    }
}
