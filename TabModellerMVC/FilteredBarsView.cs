using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace TabModellerMVC
{
    public partial class FilteredBarsView : Form, ITabModellerView
    {

        private TabModellerModel tabModellerModel;

        //Int used to position BarTextBoxes generated by to show tab.
        private static int BAR_TEXT_VIEW_X_COORD = 40;
        private static int BAR_TEXT_BOX_Y_COORD_INCREMENT = 80;

        private String[] barTypeStrings = {"TabModellerMVC.SimpleBar", "TabModellerMVC.ComplexBar", "TabModellerMVC.BarWithTag"};

        private int currentFilter;

        private List<Bar> bars;

        /// <summary>
        /// The constructor for the filtered bar view. Calls the TabModellerView super class constructor.
        /// </summary>
        /// <param name="tabModellerModel">The model for this view.</param>
        public FilteredBarsView(TabModellerModel tabModellerModel)
        {
            this.tabModellerModel = tabModellerModel;
            InitializeComponent();
            this.filterComboBox.SelectedIndex = 0;
        }

        /// <summary>
        /// This function updates the GraphicalBarView with new data from the model.
        /// </summary>
        /// <param name="bars">An array of Bar objects to update the view with.</param>
        public void update(List<Bar> bars)
        {
            //Updating the view the news bars from the model.
            this.bars = bars;
            //Drawing the correct types of bars to the view.
            this.drawBars();
           
        }

        /// <summary>
        /// This function draws the current filtered type of bars to the screen.
        /// </summary>
        public void drawBars()
        {
            this.clearTabPanel();
            int yPosition = 0;
            try { 
                for (int i = 0; i < bars.Count; i++)
                {
                    if (barTypeStrings[currentFilter].Equals(bars[i].GetType().ToString()))
                    {
                        BarTextBox currentBarTextBox = new BarTextBox(i);
                        currentBarTextBox.id = i;
                        for (int x = 0; x < 4; x++)
                        {
                            //Do not add new line to last line as it is unnessecary.
                            if (x != 3)
                            {
                                currentBarTextBox.Text += bars[i].lines[x] + Environment.NewLine;
                            }
                            else
                            {
                                currentBarTextBox.Text += bars[i].lines[x];
                            }
                        }
                        //Positioning and sizing the new barTextBox.
                        currentBarTextBox.Size = new Size(500, 70);
                        currentBarTextBox.Location = new Point(BAR_TEXT_VIEW_X_COORD, yPosition);
                        //Adding the barTextBox to the panel on the form so that it actually appears.
                        this.tabPanel.Controls.Add(currentBarTextBox);
                        yPosition += BAR_TEXT_BOX_Y_COORD_INCREMENT;
                    }
                }
            }
            //If users tries to filter with no bars - do not crash.
            catch (NullReferenceException ex)
            {
                return;
            }
        }

        /// <summary>
        /// This function disposes all the controls on the tab panel so they can be redrawn with new data.
        /// </summary>
        public void clearTabPanel()
        {
            while (this.tabPanel.Controls.Count > 0)
            {
                tabPanel.Controls[0].Dispose();
            }
        }

        /// <summary>
        /// This function runs when the selection in the combo box changes it displays the bars of the selected type.
        /// </summary>
        /// <param name="sender">The sender of this event. In this case the filter combo box.</param>
        /// <param name="e">The event args for this event.</param>
        private void filterComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            this.currentFilter = ((ComboBox)sender).SelectedIndex;
            this.drawBars();
        }

        /// <summary>
        /// This function runs when this form is closed. It exits the application.
        /// </summary>
        /// <param name="sender">The sender of this event. In this case the form.</param>
        /// <param name="e">The event args for the event.</param>
        private void FilteredBarsView_FormClosed(object sender, FormClosedEventArgs e)
        {
            Application.Exit();
        }
    }
}
